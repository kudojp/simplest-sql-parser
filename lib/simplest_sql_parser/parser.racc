class SimplestSqlParser::Parser

# ref. https://i.loveruby.net/ja/projects/racc/doc/grammar.html
rule
  # Each line should be formatted as:
  # `target : pattern1 | pattern2 { action_block }`
  #
  # - pattern should be a composed of (`next_token[0]`, another target)
  # - In action, substitute the generated AST node into `result` with `val[0] = next_token[1]`

  # MEMO: The first line in the rule has a special meaning.only the program has to be finally reduced down into the first line.
  # Every rule has to be reduced down to this target.
  query : select_statement {result = AST::QueryNode.new(select_statement: val[0])}
        | select_statement from_statement {result = AST::QueryNode.new(select_statement: val[0], from_statement: val[1])} # TODO: accept from, where, etc.

  select_statement : SELECT selected_columns { result = AST::SelectStatementNode.new(selected_columns: val[1])} # TODO: accept multiple columns

  selected_columns: selected_column { result = [val[0]] }
                  | selected_columns COMMA selected_column { result = val[0] + [val[2]] }

  selected_column: column_node { result = AST::SelectedColumnNode.new(col_def: val[0]) }
#                 | function_node {}

  column_node : IDENTIFIER { result = AST::ColumnNode.new(type: :single_col, name: val[0])}

  from_statement : FROM expression { result = AST::FromStatementNode.new(table: AST::TableNode.new(table_def: val[1])) }

  expression : IDENTIFIER {result = AST::ExpressionNode.new(value: val[0])}

---- header
Dir[File.join(File.dirname(__FILE__), "ast/*.rb")].each {|file| require file }

---- inner
# innerの内容はそのまま生成されたparser.tab.rbファイル内のParserクラス内でmodule_evalされる。
# ref. https://i.loveruby.net/ja/projects/racc/doc/parser.html#Racc%3a%3aParser-yyparse

def initialize(query)
  @scanner = SimplestSqlParser::LexicalScanner.new
  @scanner.scan_setup(query)
end

# #next_token はここで必ず実装する必要がある。
def next_token
  @scanner.next_token
end

---- footer
# footerの内容はそのまま生成されたparser.tab.rbファイルの下にコピーされる。
# ruby parser.tab.rb で直にファイルを実行する際に Parserクラスを使って何かをするときなどに使える。
