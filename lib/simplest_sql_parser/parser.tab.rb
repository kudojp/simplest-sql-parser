#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

Dir[File.join(File.dirname(__FILE__), "ast/*.rb")].each {|file| require file }

module SimplestSqlParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 31)
# innerの内容はそのまま生成されたparser.tab.rbファイル内のParserクラス内でmodule_evalされる。
# ref. https://i.loveruby.net/ja/projects/racc/doc/parser.html#Racc%3a%3aParser-yyparse

def initialize(query)
  @scanner = SimplestSqlParser::LexicalScanner.new
  @scanner.scan_setup(query)
end

# #next_token はここで必ず実装する必要がある。
def next_token
  @scanner.next_token
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     4,     6,    10,    11,    10,    13,    10 ]

racc_action_check = [
     0,     1,     2,     3,     4,     6,     7,    13 ]

racc_action_pointer = [
    -2,     1,    -2,    -2,     4,   nil,     0,     3,   nil,   nil,
   nil,   nil,   nil,     2,   nil ]

racc_action_default = [
    -9,    -9,    -1,    -9,    -9,    -2,    -9,    -3,    -4,    -6,
    -8,    15,    -7,    -9,    -5 ]

racc_goto_table = [
     8,     1,     2,     5,     7,    12,   nil,   nil,   nil,   nil,
    14 ]

racc_goto_check = [
     5,     1,     2,     3,     4,     6,   nil,   nil,   nil,   nil,
     5 ]

racc_goto_pointer = [
   nil,     1,     2,     1,     1,    -3,    -1 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_1,
  2, 7, :_reduce_2,
  2, 8, :_reduce_3,
  1, 10, :_reduce_4,
  3, 10, :_reduce_5,
  1, 11, :_reduce_6,
  2, 9, :_reduce_7,
  1, 12, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 15

racc_token_table = {
  false => 0,
  :error => 1,
  :SELECT => 2,
  :COMMA => 3,
  :FROM => 4,
  :IDENTIFIER => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "SELECT",
  "COMMA",
  "FROM",
  "IDENTIFIER",
  "$start",
  "query",
  "select_statement",
  "from_statement",
  "columns",
  "column",
  "expression" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 12)
  def _reduce_1(val, _values, result)
    result = AST::QueryNode.new(select_statement: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_2(val, _values, result)
    result = AST::QueryNode.new(select_statement: val[0], from_statement: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_3(val, _values, result)
     result = AST::SelectStatementNode.new(columns: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 17)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_5(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_6(val, _values, result)
     result = AST::ColumnNode.new(col_def: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_7(val, _values, result)
     result = AST::FromStatementNode.new(table: AST::TableNode.new(table_def: val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_8(val, _values, result)
    result = AST::ExpressionNode.new(value: val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SimplestSqlParser

# footerの内容はそのまま生成されたparser.tab.rbファイルの下にコピーされる。
# ruby parser.tab.rb で直にファイルを実行する際に Parserクラスを使って何かをするときなどに使える。
